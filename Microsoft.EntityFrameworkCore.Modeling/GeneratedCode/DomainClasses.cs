//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.EntityFrameworkCore.Modeling
{
	/// <summary>
	/// DomainClass Model
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EntityFrameworkCore.Modeling.Model.DisplayName", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EntityFrameworkCore.Modeling.Model.Description", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("29dee408-fd73-4d83-a5d3-b90c9d3024e7")]
	public partial class Model : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Model domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x29dee408, 0xfd73, 0x4d83, 0xa5, 0xd3, 0xb9, 0x0c, 0x9d, 0x30, 0x24, 0xe7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Model(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Model(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EntityTypes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EntityTypes.
		/// Description for Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityType> EntityTypes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EntityType>, EntityType>(global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.ModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.EntityFrameworkCore.Modeling.EntityType.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.EntityFrameworkCore.Modeling.EntityType sourceEntityType1 = sourceElement as global::Microsoft.EntityFrameworkCore.Modeling.EntityType;
			if (sourceEntityType1 != null)
			{
				// Create link for path ModelHasEntityTypes.EntityTypes
				this.EntityTypes.Add(sourceEntityType1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.EntityFrameworkCore.Modeling.EntityType sourceEntityType1 = sourceElement as global::Microsoft.EntityFrameworkCore.Modeling.EntityType;
			if (sourceEntityType1 != null)
			{
				// Delete link for path ModelHasEntityTypes.EntityTypes
				
				foreach (DslModeling::ElementLink link in global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.GetLinks((global::Microsoft.EntityFrameworkCore.Modeling.Model)this, sourceEntityType1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.ModelDomainRoleId, global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.EntityTypeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Microsoft.EntityFrameworkCore.Modeling
{
	/// <summary>
	/// DomainClass EntityType
	/// Description for Microsoft.EntityFrameworkCore.Modeling.EntityType
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EntityFrameworkCore.Modeling.EntityType.DisplayName", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EntityFrameworkCore.Modeling.EntityType.Description", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("bab08d21-e781-40a7-a46e-264bc1c2540d")]
	public partial class EntityType : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EntityType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbab08d21, 0xe781, 0x40a7, 0xa4, 0x6e, 0x26, 0x4b, 0xc1, 0xc2, 0x54, 0x0d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x63489560, 0x1142, 0x455e, 0x9a, 0x87, 0x11, 0xca, 0x92, 0x41, 0xc0, 0xbc);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Microsoft.EntityFrameworkCore.Modeling.EntityType.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EntityFrameworkCore.Modeling.EntityType/Name.DisplayName", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EntityFrameworkCore.Modeling.EntityType/Name.Description", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("63489560-1142-455e-9a87-11ca9241c0bc")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityType.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityType, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityType.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityType.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.EntityType
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.EntityTypeDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.EntityTypeDomainRoleId, value);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for
		/// Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.EntityType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.EntityTypeDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.EntityFrameworkCore.Modeling.Property.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.EntityFrameworkCore.Modeling.Property sourceProperty1 = sourceElement as global::Microsoft.EntityFrameworkCore.Modeling.Property;
			if (sourceProperty1 != null)
			{
				// Create link for path EntityTypeHasProperties.Properties
				this.Properties.Add(sourceProperty1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.EntityFrameworkCore.Modeling.Property sourceProperty1 = sourceElement as global::Microsoft.EntityFrameworkCore.Modeling.Property;
			if (sourceProperty1 != null)
			{
				// Delete link for path EntityTypeHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.GetLinks((global::Microsoft.EntityFrameworkCore.Modeling.EntityType)this, sourceProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.EntityTypeDomainRoleId, global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.PropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Microsoft.EntityFrameworkCore.Modeling
{
	/// <summary>
	/// DomainClass Property
	/// Description for Microsoft.EntityFrameworkCore.Modeling.Property
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EntityFrameworkCore.Modeling.Property.DisplayName", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EntityFrameworkCore.Modeling.Property.Description", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("837bf911-75bc-4051-bdd5-624fe2d61ad3")]
	public partial class Property : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Property domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x837bf911, 0x75bc, 0x4051, 0xbd, 0xd5, 0x62, 0x4f, 0xe2, 0xd6, 0x1a, 0xd3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xc8a20b75, 0x719f, 0x4e4d, 0xbb, 0x56, 0x17, 0xd0, 0x92, 0xc2, 0xdb, 0x72);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Microsoft.EntityFrameworkCore.Modeling.Property.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EntityFrameworkCore.Modeling.Property/Name.DisplayName", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EntityFrameworkCore.Modeling.Property/Name.Description", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("c8a20b75-719f-4e4d-bb56-17d092c2db72")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EntityType opposite domain role accessor
		/// <summary>
		/// Gets or sets EntityType.
		/// Description for
		/// Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.Property
		/// </summary>
		public virtual EntityType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.PropertyDomainRoleId) as EntityType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
