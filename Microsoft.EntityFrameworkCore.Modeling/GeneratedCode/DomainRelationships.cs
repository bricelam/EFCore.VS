//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.EntityFrameworkCore.Modeling
{
	/// <summary>
	/// DomainRelationship ModelHasEntityTypes
	/// Description for Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.DisplayName", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.Description", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e3ba88ec-d75f-4723-9d9b-c77d1111faa5")]
	public partial class ModelHasEntityTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasEntityTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe3ba88ec, 0xd75f, 0x4723, 0x9d, 0x9b, 0xc7, 0x7d, 0x11, 0x11, 0xfa, 0xa5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasEntityTypes link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">EntityType to use as the target of the relationship.</param>
		public ModelHasEntityTypes(Model source, EntityType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasEntityTypes.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasEntityTypes.EntityTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasEntityTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasEntityTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasEntityTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasEntityTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xf2f74445, 0xd28c, 0x4113, 0xaf, 0x6a, 0x6f, 0xd7, 0x84, 0xe0, 0xd9, 0x9f);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes/Model.DisplayName", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes/Model.Description", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EntityTypes", PropertyDisplayNameKey="Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f2f74445-d28c-4113-af6a-6fd784e0d99f")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a EntityType
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(EntityType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityTypeDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(EntityType element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityTypeDomainRoleId, newModel);
		}
		#endregion
		#region EntityType domain role code
		
		/// <summary>
		/// EntityType domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeDomainRoleId = new global::System.Guid(0xe41fece7, 0x590c, 0x474f, 0xbb, 0xdc, 0x62, 0x75, 0xa7, 0x8d, 0xbb, 0x1a);
		
		/// <summary>
		/// DomainRole EntityType
		/// Description for
		/// Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.EntityType
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes/EntityType.DisplayName", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes/EntityType.Description", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes/EntityType.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e41fece7-590c-474f-bbdc-6275a78dbb1a")]
		public virtual EntityType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityType)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityTypes of a Model
		/// <summary>
		/// Gets a list of EntityTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityType> GetEntityTypes(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityType>, EntityType>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasEntityTypes links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes> GetLinksToEntityTypes ( global::Microsoft.EntityFrameworkCore.Modeling.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes>(modelInstance, global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.ModelDomainRoleId);
		}
		#endregion
		#region EntityType link accessor
		/// <summary>
		/// Get the ModelHasEntityTypes link to a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes GetLinkToModel (global::Microsoft.EntityFrameworkCore.Modeling.EntityType entityTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes>(entityTypeInstance, global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.EntityTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntityType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasEntityTypes instance accessors
		
		/// <summary>
		/// Get any ModelHasEntityTypes links between a given Model and a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes> GetLinks( global::Microsoft.EntityFrameworkCore.Modeling.Model source, global::Microsoft.EntityFrameworkCore.Modeling.EntityType target )
		{
			global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes> outLinks = new global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes>();
			global::System.Collections.Generic.IList<global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes>(source, global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.ModelDomainRoleId);
			foreach ( global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes link in links )
			{
				if ( target.Equals(link.EntityType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasEntityTypes link between a given Modeland a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes GetLink( global::Microsoft.EntityFrameworkCore.Modeling.Model source, global::Microsoft.EntityFrameworkCore.Modeling.EntityType target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes>(source, global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes.ModelDomainRoleId);
			foreach ( global::Microsoft.EntityFrameworkCore.Modeling.ModelHasEntityTypes link in links )
			{
				if ( target.Equals(link.EntityType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.EntityFrameworkCore.Modeling
{
	/// <summary>
	/// DomainRelationship EntityTypeHasProperties
	/// Description for Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.DisplayName", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.Description", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8edea6a3-072d-4dbd-adf3-bb4fb73a36c7")]
	public partial class EntityTypeHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8edea6a3, 0x072d, 0x4dbd, 0xad, 0xf3, 0xbb, 0x4f, 0xb7, 0x3a, 0x36, 0xc7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeHasProperties link in the same Partition as the given EntityType
		/// </summary>
		/// <param name="source">EntityType to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public EntityTypeHasProperties(EntityType source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeHasProperties.EntityTypeDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityType domain role code
		
		/// <summary>
		/// EntityType domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeDomainRoleId = new global::System.Guid(0x043615a9, 0x7436, 0x45ce, 0xae, 0x67, 0xd3, 0xcb, 0xd6, 0xaa, 0xca, 0x43);
		
		/// <summary>
		/// DomainRole EntityType
		/// Description for
		/// Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.EntityType
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties/EntityType.DisplayName", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties/EntityType.Description", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties/EntityType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("043615a9-7436-45ce-ae67-d3cbd6aaca43")]
		public virtual EntityType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityType)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityType of a Property
		/// <summary>
		/// Gets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityType GetEntityType(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as EntityType;
		}
		
		/// <summary>
		/// Sets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityType(Property element, EntityType newEntityType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newEntityType);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x41e34ff2, 0xd559, 0x4bd9, 0xba, 0x6e, 0x79, 0x51, 0x90, 0x5a, 0x5e, 0x5a);
		
		/// <summary>
		/// DomainRole Property
		/// Description for
		/// Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties/Property.DisplayName", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties/Property.Description", typeof(global::Microsoft.EntityFrameworkCore.Modeling.EntityFrameworkCoreDomainModel), "Microsoft.EntityFrameworkCore.Modeling.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityType", PropertyDisplayNameKey="Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("41e34ff2-d559-4bd9-ba6e-7951905a5e5a")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a EntityType
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(EntityType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, EntityTypeDomainRoleId);
		}
		#endregion
		#region EntityType link accessor
		/// <summary>
		/// Get the list of EntityTypeHasProperties links to a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties> GetLinksToProperties ( global::Microsoft.EntityFrameworkCore.Modeling.EntityType entityTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties>(entityTypeInstance, global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.EntityTypeDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the EntityTypeHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties GetLinkToEntityType (global::Microsoft.EntityFrameworkCore.Modeling.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties>(propertyInstance, global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeHasProperties instance accessors
		
		/// <summary>
		/// Get any EntityTypeHasProperties links between a given EntityType and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties> GetLinks( global::Microsoft.EntityFrameworkCore.Modeling.EntityType source, global::Microsoft.EntityFrameworkCore.Modeling.Property target )
		{
			global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties> outLinks = new global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties>();
			global::System.Collections.Generic.IList<global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties>(source, global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.EntityTypeDomainRoleId);
			foreach ( global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeHasProperties link between a given EntityTypeand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties GetLink( global::Microsoft.EntityFrameworkCore.Modeling.EntityType source, global::Microsoft.EntityFrameworkCore.Modeling.Property target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties>(source, global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties.EntityTypeDomainRoleId);
			foreach ( global::Microsoft.EntityFrameworkCore.Modeling.EntityTypeHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
