//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.EFDesigner
{
	/// <summary>
	/// DomainRelationship ModelHasEntityTypes
	/// Description for Microsoft.EFDesigner.ModelHasEntityTypes
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EFDesigner.ModelHasEntityTypes.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EFDesigner.ModelHasEntityTypes.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fc91ea6e-f85d-4f75-967d-ce43c08e14f2")]
	public partial class ModelHasEntityTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasEntityTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfc91ea6e, 0xf85d, 0x4f75, 0x96, 0x7d, 0xce, 0x43, 0xc0, 0x8e, 0x14, 0xf2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasEntityTypes link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">EntityType to use as the target of the relationship.</param>
		public ModelHasEntityTypes(Model source, EntityType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasEntityTypes.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasEntityTypes.EntityTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasEntityTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasEntityTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasEntityTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasEntityTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x157107a1, 0xa21a, 0x4e83, 0xaf, 0x86, 0xbb, 0x30, 0x63, 0xaa, 0x35, 0x9d);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Microsoft.EFDesigner.ModelHasEntityTypes.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.ModelHasEntityTypes/Model.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.ModelHasEntityTypes/Model.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EntityTypes", PropertyDisplayNameKey="Microsoft.EFDesigner.ModelHasEntityTypes/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("157107a1-a21a-4e83-af86-bb3063aa359d")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a EntityType
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(EntityType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityTypeDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(EntityType element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityTypeDomainRoleId, newModel);
		}
		#endregion
		#region EntityType domain role code
		
		/// <summary>
		/// EntityType domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeDomainRoleId = new global::System.Guid(0xb63c4e2d, 0x1840, 0x4eba, 0x8e, 0x7f, 0x00, 0xd7, 0xb3, 0x3f, 0xfb, 0x0b);
		
		/// <summary>
		/// DomainRole EntityType
		/// Description for Microsoft.EFDesigner.ModelHasEntityTypes.EntityType
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.ModelHasEntityTypes/EntityType.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.ModelHasEntityTypes/EntityType.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Microsoft.EFDesigner.ModelHasEntityTypes/EntityType.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b63c4e2d-1840-4eba-8e7f-00d7b33ffb0b")]
		public virtual EntityType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityType)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityTypes of a Model
		/// <summary>
		/// Gets a list of EntityTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityType> GetEntityTypes(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityType>, EntityType>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasEntityTypes links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.ModelHasEntityTypes> GetLinksToEntityTypes ( global::Microsoft.EFDesigner.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.ModelHasEntityTypes>(modelInstance, global::Microsoft.EFDesigner.ModelHasEntityTypes.ModelDomainRoleId);
		}
		#endregion
		#region EntityType link accessor
		/// <summary>
		/// Get the ModelHasEntityTypes link to a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EFDesigner.ModelHasEntityTypes GetLinkToModel (global::Microsoft.EFDesigner.EntityType entityTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.ModelHasEntityTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.ModelHasEntityTypes>(entityTypeInstance, global::Microsoft.EFDesigner.ModelHasEntityTypes.EntityTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntityType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasEntityTypes instance accessors
		
		/// <summary>
		/// Get any ModelHasEntityTypes links between a given Model and a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.ModelHasEntityTypes> GetLinks( global::Microsoft.EFDesigner.Model source, global::Microsoft.EFDesigner.EntityType target )
		{
			global::System.Collections.Generic.List<global::Microsoft.EFDesigner.ModelHasEntityTypes> outLinks = new global::System.Collections.Generic.List<global::Microsoft.EFDesigner.ModelHasEntityTypes>();
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.ModelHasEntityTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.ModelHasEntityTypes>(source, global::Microsoft.EFDesigner.ModelHasEntityTypes.ModelDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.ModelHasEntityTypes link in links )
			{
				if ( target.Equals(link.EntityType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasEntityTypes link between a given Modeland a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EFDesigner.ModelHasEntityTypes GetLink( global::Microsoft.EFDesigner.Model source, global::Microsoft.EFDesigner.EntityType target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.ModelHasEntityTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.ModelHasEntityTypes>(source, global::Microsoft.EFDesigner.ModelHasEntityTypes.ModelDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.ModelHasEntityTypes link in links )
			{
				if ( target.Equals(link.EntityType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.EFDesigner
{
	/// <summary>
	/// DomainRelationship EntityTypeHasProperties
	/// Description for Microsoft.EFDesigner.EntityTypeHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EFDesigner.EntityTypeHasProperties.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EFDesigner.EntityTypeHasProperties.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4ebd1227-6848-4647-8319-a4362b515278")]
	public partial class EntityTypeHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4ebd1227, 0x6848, 0x4647, 0x83, 0x19, 0xa4, 0x36, 0x2b, 0x51, 0x52, 0x78);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeHasProperties link in the same Partition as the given EntityType
		/// </summary>
		/// <param name="source">EntityType to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public EntityTypeHasProperties(EntityType source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeHasProperties.EntityTypeDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityType domain role code
		
		/// <summary>
		/// EntityType domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeDomainRoleId = new global::System.Guid(0xa54c29a0, 0x0c86, 0x49d0, 0xac, 0x1d, 0x15, 0xec, 0x26, 0x03, 0x16, 0x4c);
		
		/// <summary>
		/// DomainRole EntityType
		/// Description for Microsoft.EFDesigner.EntityTypeHasProperties.EntityType
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.EntityTypeHasProperties/EntityType.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.EntityTypeHasProperties/EntityType.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="Microsoft.EFDesigner.EntityTypeHasProperties/EntityType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("a54c29a0-0c86-49d0-ac1d-15ec2603164c")]
		public virtual EntityType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityType)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityType of a Property
		/// <summary>
		/// Gets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityType GetEntityType(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as EntityType;
		}
		
		/// <summary>
		/// Sets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityType(Property element, EntityType newEntityType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newEntityType);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0xd47cf4a5, 0x3549, 0x4698, 0xaa, 0x45, 0xcc, 0xb3, 0x29, 0xb2, 0xb0, 0x98);
		
		/// <summary>
		/// DomainRole Property
		/// Description for Microsoft.EFDesigner.EntityTypeHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.EntityTypeHasProperties/Property.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.EntityTypeHasProperties/Property.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityType", PropertyDisplayNameKey="Microsoft.EFDesigner.EntityTypeHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d47cf4a5-3549-4698-aa45-ccb329b2b098")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a EntityType
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(EntityType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, EntityTypeDomainRoleId);
		}
		#endregion
		#region EntityType link accessor
		/// <summary>
		/// Get the list of EntityTypeHasProperties links to a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.EntityTypeHasProperties> GetLinksToProperties ( global::Microsoft.EFDesigner.EntityType entityTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasProperties>(entityTypeInstance, global::Microsoft.EFDesigner.EntityTypeHasProperties.EntityTypeDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the EntityTypeHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EFDesigner.EntityTypeHasProperties GetLinkToEntityType (global::Microsoft.EFDesigner.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.EntityTypeHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasProperties>(propertyInstance, global::Microsoft.EFDesigner.EntityTypeHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeHasProperties instance accessors
		
		/// <summary>
		/// Get any EntityTypeHasProperties links between a given EntityType and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.EntityTypeHasProperties> GetLinks( global::Microsoft.EFDesigner.EntityType source, global::Microsoft.EFDesigner.Property target )
		{
			global::System.Collections.Generic.List<global::Microsoft.EFDesigner.EntityTypeHasProperties> outLinks = new global::System.Collections.Generic.List<global::Microsoft.EFDesigner.EntityTypeHasProperties>();
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.EntityTypeHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasProperties>(source, global::Microsoft.EFDesigner.EntityTypeHasProperties.EntityTypeDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.EntityTypeHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeHasProperties link between a given EntityTypeand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EFDesigner.EntityTypeHasProperties GetLink( global::Microsoft.EFDesigner.EntityType source, global::Microsoft.EFDesigner.Property target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.EntityTypeHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasProperties>(source, global::Microsoft.EFDesigner.EntityTypeHasProperties.EntityTypeDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.EntityTypeHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.EFDesigner
{
	/// <summary>
	/// DomainRelationship EntityTypeHasForeignKeys
	/// Description for Microsoft.EFDesigner.EntityTypeHasForeignKeys
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EFDesigner.EntityTypeHasForeignKeys.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EFDesigner.EntityTypeHasForeignKeys.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("005cda0c-1994-4feb-8bdb-23ed60c477ec")]
	public partial class EntityTypeHasForeignKeys : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeHasForeignKeys domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x005cda0c, 0x1994, 0x4feb, 0x8b, 0xdb, 0x23, 0xed, 0x60, 0xc4, 0x77, 0xec);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeHasForeignKeys link in the same Partition as the given EntityType
		/// </summary>
		/// <param name="source">EntityType to use as the source of the relationship.</param>
		/// <param name="target">ForeignKey to use as the target of the relationship.</param>
		public EntityTypeHasForeignKeys(EntityType source, ForeignKey target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeHasForeignKeys.EntityTypeDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeHasForeignKeys.ForeignKeyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasForeignKeys(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasForeignKeys(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasForeignKeys(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasForeignKeys(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityType domain role code
		
		/// <summary>
		/// EntityType domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeDomainRoleId = new global::System.Guid(0x15947ae0, 0x16c8, 0x4fdd, 0xa0, 0x1b, 0x6e, 0x14, 0x69, 0x11, 0xd0, 0x55);
		
		/// <summary>
		/// DomainRole EntityType
		/// Description for Microsoft.EFDesigner.EntityTypeHasForeignKeys.EntityType
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.EntityTypeHasForeignKeys/EntityType.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.EntityTypeHasForeignKeys/EntityType.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ForeignKeys", PropertyDisplayNameKey="Microsoft.EFDesigner.EntityTypeHasForeignKeys/EntityType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("15947ae0-16c8-4fdd-a01b-6e146911d055")]
		public virtual EntityType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityType)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityType of a ForeignKey
		/// <summary>
		/// Gets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityType GetEntityType(ForeignKey element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ForeignKeyDomainRoleId) as EntityType;
		}
		
		/// <summary>
		/// Sets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityType(ForeignKey element, EntityType newEntityType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ForeignKeyDomainRoleId, newEntityType);
		}
		#endregion
		#region ForeignKey domain role code
		
		/// <summary>
		/// ForeignKey domain role Id.
		/// </summary>
		public static readonly global::System.Guid ForeignKeyDomainRoleId = new global::System.Guid(0x005b0884, 0x7afb, 0x41d6, 0x96, 0x62, 0xe8, 0xf1, 0xd4, 0x77, 0x12, 0x47);
		
		/// <summary>
		/// DomainRole ForeignKey
		/// Description for Microsoft.EFDesigner.EntityTypeHasForeignKeys.ForeignKey
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.EntityTypeHasForeignKeys/ForeignKey.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.EntityTypeHasForeignKeys/ForeignKey.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityType", PropertyDisplayNameKey="Microsoft.EFDesigner.EntityTypeHasForeignKeys/ForeignKey.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("005b0884-7afb-41d6-9662-e8f1d4771247")]
		public virtual ForeignKey ForeignKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ForeignKey)DslModeling::DomainRoleInfo.GetRolePlayer(this, ForeignKeyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ForeignKeyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ForeignKeys of a EntityType
		/// <summary>
		/// Gets a list of ForeignKeys.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ForeignKey> GetForeignKeys(EntityType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ForeignKey>, ForeignKey>(element, EntityTypeDomainRoleId);
		}
		#endregion
		#region EntityType link accessor
		/// <summary>
		/// Get the list of EntityTypeHasForeignKeys links to a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.EntityTypeHasForeignKeys> GetLinksToForeignKeys ( global::Microsoft.EFDesigner.EntityType entityTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasForeignKeys>(entityTypeInstance, global::Microsoft.EFDesigner.EntityTypeHasForeignKeys.EntityTypeDomainRoleId);
		}
		#endregion
		#region ForeignKey link accessor
		/// <summary>
		/// Get the EntityTypeHasForeignKeys link to a ForeignKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EFDesigner.EntityTypeHasForeignKeys GetLinkToEntityType (global::Microsoft.EFDesigner.ForeignKey foreignKeyInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.EntityTypeHasForeignKeys> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasForeignKeys>(foreignKeyInstance, global::Microsoft.EFDesigner.EntityTypeHasForeignKeys.ForeignKeyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ForeignKey not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeHasForeignKeys instance accessors
		
		/// <summary>
		/// Get any EntityTypeHasForeignKeys links between a given EntityType and a ForeignKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.EntityTypeHasForeignKeys> GetLinks( global::Microsoft.EFDesigner.EntityType source, global::Microsoft.EFDesigner.ForeignKey target )
		{
			global::System.Collections.Generic.List<global::Microsoft.EFDesigner.EntityTypeHasForeignKeys> outLinks = new global::System.Collections.Generic.List<global::Microsoft.EFDesigner.EntityTypeHasForeignKeys>();
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.EntityTypeHasForeignKeys> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasForeignKeys>(source, global::Microsoft.EFDesigner.EntityTypeHasForeignKeys.EntityTypeDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.EntityTypeHasForeignKeys link in links )
			{
				if ( target.Equals(link.ForeignKey) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeHasForeignKeys link between a given EntityTypeand a ForeignKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EFDesigner.EntityTypeHasForeignKeys GetLink( global::Microsoft.EFDesigner.EntityType source, global::Microsoft.EFDesigner.ForeignKey target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.EntityTypeHasForeignKeys> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasForeignKeys>(source, global::Microsoft.EFDesigner.EntityTypeHasForeignKeys.EntityTypeDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.EntityTypeHasForeignKeys link in links )
			{
				if ( target.Equals(link.ForeignKey) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.EFDesigner
{
	/// <summary>
	/// DomainRelationship EntityTypeHasKeyes
	/// Description for Microsoft.EFDesigner.EntityTypeHasKeyes
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EFDesigner.EntityTypeHasKeyes.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EFDesigner.EntityTypeHasKeyes.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("96e7f089-6110-41c1-8264-f98116599d15")]
	public partial class EntityTypeHasKeyes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeHasKeyes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x96e7f089, 0x6110, 0x41c1, 0x82, 0x64, 0xf9, 0x81, 0x16, 0x59, 0x9d, 0x15);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeHasKeyes link in the same Partition as the given EntityType
		/// </summary>
		/// <param name="source">EntityType to use as the source of the relationship.</param>
		/// <param name="target">Key to use as the target of the relationship.</param>
		public EntityTypeHasKeyes(EntityType source, Key target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeHasKeyes.EntityTypeDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeHasKeyes.KeyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasKeyes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasKeyes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasKeyes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasKeyes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityType domain role code
		
		/// <summary>
		/// EntityType domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeDomainRoleId = new global::System.Guid(0x66e3ab62, 0x69b9, 0x43c5, 0xb8, 0x50, 0xa8, 0x16, 0x34, 0xab, 0x1e, 0xc7);
		
		/// <summary>
		/// DomainRole EntityType
		/// Description for Microsoft.EFDesigner.EntityTypeHasKeyes.EntityType
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.EntityTypeHasKeyes/EntityType.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.EntityTypeHasKeyes/EntityType.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Keys", PropertyDisplayNameKey="Microsoft.EFDesigner.EntityTypeHasKeyes/EntityType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("66e3ab62-69b9-43c5-b850-a81634ab1ec7")]
		public virtual EntityType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityType)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityType of a Key
		/// <summary>
		/// Gets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityType GetEntityType(Key element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, KeyDomainRoleId) as EntityType;
		}
		
		/// <summary>
		/// Sets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityType(Key element, EntityType newEntityType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, KeyDomainRoleId, newEntityType);
		}
		#endregion
		#region Key domain role code
		
		/// <summary>
		/// Key domain role Id.
		/// </summary>
		public static readonly global::System.Guid KeyDomainRoleId = new global::System.Guid(0xbbbace16, 0xa787, 0x47f6, 0x9d, 0x46, 0xb3, 0xf0, 0x68, 0xea, 0xa6, 0x73);
		
		/// <summary>
		/// DomainRole Key
		/// Description for Microsoft.EFDesigner.EntityTypeHasKeyes.Key
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.EntityTypeHasKeyes/Key.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.EntityTypeHasKeyes/Key.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityType", PropertyDisplayNameKey="Microsoft.EFDesigner.EntityTypeHasKeyes/Key.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bbbace16-a787-47f6-9d46-b3f068eaa673")]
		public virtual Key Key
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Key)DslModeling::DomainRoleInfo.GetRolePlayer(this, KeyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, KeyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Keys of a EntityType
		/// <summary>
		/// Gets a list of Keys.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Key> GetKeys(EntityType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Key>, Key>(element, EntityTypeDomainRoleId);
		}
		#endregion
		#region EntityType link accessor
		/// <summary>
		/// Get the list of EntityTypeHasKeyes links to a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.EntityTypeHasKeyes> GetLinksToKeys ( global::Microsoft.EFDesigner.EntityType entityTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasKeyes>(entityTypeInstance, global::Microsoft.EFDesigner.EntityTypeHasKeyes.EntityTypeDomainRoleId);
		}
		#endregion
		#region Key link accessor
		/// <summary>
		/// Get the EntityTypeHasKeyes link to a Key.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EFDesigner.EntityTypeHasKeyes GetLinkToEntityType (global::Microsoft.EFDesigner.Key keyInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.EntityTypeHasKeyes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasKeyes>(keyInstance, global::Microsoft.EFDesigner.EntityTypeHasKeyes.KeyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Key not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeHasKeyes instance accessors
		
		/// <summary>
		/// Get any EntityTypeHasKeyes links between a given EntityType and a Key.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.EntityTypeHasKeyes> GetLinks( global::Microsoft.EFDesigner.EntityType source, global::Microsoft.EFDesigner.Key target )
		{
			global::System.Collections.Generic.List<global::Microsoft.EFDesigner.EntityTypeHasKeyes> outLinks = new global::System.Collections.Generic.List<global::Microsoft.EFDesigner.EntityTypeHasKeyes>();
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.EntityTypeHasKeyes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasKeyes>(source, global::Microsoft.EFDesigner.EntityTypeHasKeyes.EntityTypeDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.EntityTypeHasKeyes link in links )
			{
				if ( target.Equals(link.Key) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeHasKeyes link between a given EntityTypeand a Key.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EFDesigner.EntityTypeHasKeyes GetLink( global::Microsoft.EFDesigner.EntityType source, global::Microsoft.EFDesigner.Key target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.EntityTypeHasKeyes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasKeyes>(source, global::Microsoft.EFDesigner.EntityTypeHasKeyes.EntityTypeDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.EntityTypeHasKeyes link in links )
			{
				if ( target.Equals(link.Key) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.EFDesigner
{
	/// <summary>
	/// DomainRelationship ForeignKeyReferencesKey
	/// Description for Microsoft.EFDesigner.ForeignKeyReferencesKey
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EFDesigner.ForeignKeyReferencesKey.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EFDesigner.ForeignKeyReferencesKey.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("51fa67a4-f214-4457-aa3f-b4933bb12c31")]
	public partial class ForeignKeyReferencesKey : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ForeignKeyReferencesKey domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x51fa67a4, 0xf214, 0x4457, 0xaa, 0x3f, 0xb4, 0x93, 0x3b, 0xb1, 0x2c, 0x31);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ForeignKeyReferencesKey link in the same Partition as the given ForeignKey
		/// </summary>
		/// <param name="source">ForeignKey to use as the source of the relationship.</param>
		/// <param name="target">Key to use as the target of the relationship.</param>
		public ForeignKeyReferencesKey(ForeignKey source, Key target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ForeignKeyReferencesKey.ForeignKeyDomainRoleId, source), new DslModeling::RoleAssignment(ForeignKeyReferencesKey.KeyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ForeignKeyReferencesKey(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ForeignKeyReferencesKey(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ForeignKeyReferencesKey(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ForeignKeyReferencesKey(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ForeignKey domain role code
		
		/// <summary>
		/// ForeignKey domain role Id.
		/// </summary>
		public static readonly global::System.Guid ForeignKeyDomainRoleId = new global::System.Guid(0x7906bb84, 0x18e4, 0x45a5, 0xb4, 0x95, 0x46, 0x64, 0x6c, 0x94, 0x79, 0xd9);
		
		/// <summary>
		/// DomainRole ForeignKey
		/// Description for Microsoft.EFDesigner.ForeignKeyReferencesKey.ForeignKey
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.ForeignKeyReferencesKey/ForeignKey.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.ForeignKeyReferencesKey/ForeignKey.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferencedKey", PropertyDisplayNameKey="Microsoft.EFDesigner.ForeignKeyReferencesKey/ForeignKey.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7906bb84-18e4-45a5-b495-46646c9479d9")]
		public virtual ForeignKey ForeignKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ForeignKey)DslModeling::DomainRoleInfo.GetRolePlayer(this, ForeignKeyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ForeignKeyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ForeignKeys of a Key
		/// <summary>
		/// Gets a list of ForeignKeys.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ForeignKey> GetForeignKeys(Key element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ForeignKey>, ForeignKey>(element, KeyDomainRoleId);
		}
		#endregion
		#region Key domain role code
		
		/// <summary>
		/// Key domain role Id.
		/// </summary>
		public static readonly global::System.Guid KeyDomainRoleId = new global::System.Guid(0x2608b15d, 0x0fb9, 0x4f7e, 0xb2, 0xd1, 0x96, 0x44, 0xd4, 0x2c, 0x46, 0x37);
		
		/// <summary>
		/// DomainRole Key
		/// Description for Microsoft.EFDesigner.ForeignKeyReferencesKey.Key
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.ForeignKeyReferencesKey/Key.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.ForeignKeyReferencesKey/Key.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ForeignKeys", PropertyDisplayNameKey="Microsoft.EFDesigner.ForeignKeyReferencesKey/Key.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2608b15d-0fb9-4f7e-b2d1-9644d42c4637")]
		public virtual Key Key
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Key)DslModeling::DomainRoleInfo.GetRolePlayer(this, KeyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, KeyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferencedKey of a ForeignKey
		/// <summary>
		/// Gets ReferencedKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Key GetReferencedKey(ForeignKey element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ForeignKeyDomainRoleId) as Key;
		}
		
		/// <summary>
		/// Sets ReferencedKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReferencedKey(ForeignKey element, Key newKey)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ForeignKeyDomainRoleId, newKey);
		}
		#endregion
		#region ForeignKey link accessor
		/// <summary>
		/// Get the ForeignKeyReferencesKey link to a ForeignKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EFDesigner.ForeignKeyReferencesKey GetLinkToReferencedKey (global::Microsoft.EFDesigner.ForeignKey foreignKeyInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.ForeignKeyReferencesKey> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.ForeignKeyReferencesKey>(foreignKeyInstance, global::Microsoft.EFDesigner.ForeignKeyReferencesKey.ForeignKeyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ForeignKey not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Key link accessor
		/// <summary>
		/// Get the list of ForeignKeyReferencesKey links to a Key.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.ForeignKeyReferencesKey> GetLinksToForeignKeys ( global::Microsoft.EFDesigner.Key keyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.ForeignKeyReferencesKey>(keyInstance, global::Microsoft.EFDesigner.ForeignKeyReferencesKey.KeyDomainRoleId);
		}
		#endregion
		#region ForeignKeyReferencesKey instance accessors
		
		/// <summary>
		/// Get any ForeignKeyReferencesKey links between a given ForeignKey and a Key.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.ForeignKeyReferencesKey> GetLinks( global::Microsoft.EFDesigner.ForeignKey source, global::Microsoft.EFDesigner.Key target )
		{
			global::System.Collections.Generic.List<global::Microsoft.EFDesigner.ForeignKeyReferencesKey> outLinks = new global::System.Collections.Generic.List<global::Microsoft.EFDesigner.ForeignKeyReferencesKey>();
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.ForeignKeyReferencesKey> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.ForeignKeyReferencesKey>(source, global::Microsoft.EFDesigner.ForeignKeyReferencesKey.ForeignKeyDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.ForeignKeyReferencesKey link in links )
			{
				if ( target.Equals(link.Key) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ForeignKeyReferencesKey link between a given ForeignKeyand a Key.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EFDesigner.ForeignKeyReferencesKey GetLink( global::Microsoft.EFDesigner.ForeignKey source, global::Microsoft.EFDesigner.Key target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.ForeignKeyReferencesKey> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.ForeignKeyReferencesKey>(source, global::Microsoft.EFDesigner.ForeignKeyReferencesKey.ForeignKeyDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.ForeignKeyReferencesKey link in links )
			{
				if ( target.Equals(link.Key) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.EFDesigner
{
	/// <summary>
	/// DomainRelationship ForeignKeyHasProperties
	/// Description for Microsoft.EFDesigner.ForeignKeyHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EFDesigner.ForeignKeyHasProperties.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EFDesigner.ForeignKeyHasProperties.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("102d8024-37fd-4979-b38b-bc26c70c2945")]
	public partial class ForeignKeyHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ForeignKeyHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x102d8024, 0x37fd, 0x4979, 0xb3, 0x8b, 0xbc, 0x26, 0xc7, 0x0c, 0x29, 0x45);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ForeignKeyHasProperties link in the same Partition as the given ForeignKey
		/// </summary>
		/// <param name="source">ForeignKey to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public ForeignKeyHasProperties(ForeignKey source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ForeignKeyHasProperties.ForeignKeyDomainRoleId, source), new DslModeling::RoleAssignment(ForeignKeyHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ForeignKeyHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ForeignKeyHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ForeignKeyHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ForeignKeyHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ForeignKey domain role code
		
		/// <summary>
		/// ForeignKey domain role Id.
		/// </summary>
		public static readonly global::System.Guid ForeignKeyDomainRoleId = new global::System.Guid(0x02476374, 0xc109, 0x4e3e, 0x8f, 0xf2, 0x2a, 0x50, 0xc7, 0x4d, 0x2b, 0xf7);
		
		/// <summary>
		/// DomainRole ForeignKey
		/// Description for Microsoft.EFDesigner.ForeignKeyHasProperties.ForeignKey
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.ForeignKeyHasProperties/ForeignKey.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.ForeignKeyHasProperties/ForeignKey.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="Microsoft.EFDesigner.ForeignKeyHasProperties/ForeignKey.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("02476374-c109-4e3e-8ff2-2a50c74d2bf7")]
		public virtual ForeignKey ForeignKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ForeignKey)DslModeling::DomainRoleInfo.GetRolePlayer(this, ForeignKeyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ForeignKeyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ForeignKeys of a Property
		/// <summary>
		/// Gets a list of ForeignKeys.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ForeignKey> GetForeignKeys(Property element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ForeignKey>, ForeignKey>(element, PropertyDomainRoleId);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x7f5c423b, 0xb080, 0x41d7, 0xa9, 0x86, 0x6c, 0x25, 0x51, 0x13, 0xa4, 0x21);
		
		/// <summary>
		/// DomainRole Property
		/// Description for Microsoft.EFDesigner.ForeignKeyHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.ForeignKeyHasProperties/Property.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.ForeignKeyHasProperties/Property.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ForeignKeys", PropertyDisplayNameKey="Microsoft.EFDesigner.ForeignKeyHasProperties/Property.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("7f5c423b-b080-41d7-a986-6c255113a421")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a ForeignKey
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(ForeignKey element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, ForeignKeyDomainRoleId);
		}
		#endregion
		#region ForeignKey link accessor
		/// <summary>
		/// Get the list of ForeignKeyHasProperties links to a ForeignKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.ForeignKeyHasProperties> GetLinksToProperties ( global::Microsoft.EFDesigner.ForeignKey foreignKeyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.ForeignKeyHasProperties>(foreignKeyInstance, global::Microsoft.EFDesigner.ForeignKeyHasProperties.ForeignKeyDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the list of ForeignKeyHasProperties links to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.ForeignKeyHasProperties> GetLinksToForeignKeys ( global::Microsoft.EFDesigner.Property propertyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.ForeignKeyHasProperties>(propertyInstance, global::Microsoft.EFDesigner.ForeignKeyHasProperties.PropertyDomainRoleId);
		}
		#endregion
		#region ForeignKeyHasProperties instance accessors
		
		/// <summary>
		/// Get any ForeignKeyHasProperties links between a given ForeignKey and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.ForeignKeyHasProperties> GetLinks( global::Microsoft.EFDesigner.ForeignKey source, global::Microsoft.EFDesigner.Property target )
		{
			global::System.Collections.Generic.List<global::Microsoft.EFDesigner.ForeignKeyHasProperties> outLinks = new global::System.Collections.Generic.List<global::Microsoft.EFDesigner.ForeignKeyHasProperties>();
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.ForeignKeyHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.ForeignKeyHasProperties>(source, global::Microsoft.EFDesigner.ForeignKeyHasProperties.ForeignKeyDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.ForeignKeyHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ForeignKeyHasProperties link between a given ForeignKeyand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EFDesigner.ForeignKeyHasProperties GetLink( global::Microsoft.EFDesigner.ForeignKey source, global::Microsoft.EFDesigner.Property target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.ForeignKeyHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.ForeignKeyHasProperties>(source, global::Microsoft.EFDesigner.ForeignKeyHasProperties.ForeignKeyDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.ForeignKeyHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.EFDesigner
{
	/// <summary>
	/// DomainRelationship KeyHasProperties
	/// Description for Microsoft.EFDesigner.KeyHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EFDesigner.KeyHasProperties.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EFDesigner.KeyHasProperties.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3a5bf409-d916-4371-8b45-482e2de05f8f")]
	public partial class KeyHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// KeyHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3a5bf409, 0xd916, 0x4371, 0x8b, 0x45, 0x48, 0x2e, 0x2d, 0xe0, 0x5f, 0x8f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a KeyHasProperties link in the same Partition as the given Key
		/// </summary>
		/// <param name="source">Key to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public KeyHasProperties(Key source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(KeyHasProperties.KeyDomainRoleId, source), new DslModeling::RoleAssignment(KeyHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public KeyHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public KeyHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public KeyHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public KeyHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Key domain role code
		
		/// <summary>
		/// Key domain role Id.
		/// </summary>
		public static readonly global::System.Guid KeyDomainRoleId = new global::System.Guid(0x39dc88a4, 0xa8dc, 0x4629, 0xa8, 0x0a, 0x09, 0xa9, 0x3a, 0x94, 0x5e, 0x98);
		
		/// <summary>
		/// DomainRole Key
		/// Description for Microsoft.EFDesigner.KeyHasProperties.Key
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.KeyHasProperties/Key.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.KeyHasProperties/Key.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="Microsoft.EFDesigner.KeyHasProperties/Key.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("39dc88a4-a8dc-4629-a80a-09a93a945e98")]
		public virtual Key Key
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Key)DslModeling::DomainRoleInfo.GetRolePlayer(this, KeyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, KeyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Keys of a Property
		/// <summary>
		/// Gets a list of Keys.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Key> GetKeys(Property element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Key>, Key>(element, PropertyDomainRoleId);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0xc7d6e400, 0x8eb8, 0x40c5, 0xa3, 0x63, 0x3e, 0x8c, 0x7a, 0x1c, 0x8e, 0xbb);
		
		/// <summary>
		/// DomainRole Property
		/// Description for Microsoft.EFDesigner.KeyHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.KeyHasProperties/Property.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.KeyHasProperties/Property.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Keys", PropertyDisplayNameKey="Microsoft.EFDesigner.KeyHasProperties/Property.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c7d6e400-8eb8-40c5-a363-3e8c7a1c8ebb")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a Key
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(Key element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, KeyDomainRoleId);
		}
		#endregion
		#region Key link accessor
		/// <summary>
		/// Get the list of KeyHasProperties links to a Key.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.KeyHasProperties> GetLinksToProperties ( global::Microsoft.EFDesigner.Key keyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.KeyHasProperties>(keyInstance, global::Microsoft.EFDesigner.KeyHasProperties.KeyDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the list of KeyHasProperties links to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.KeyHasProperties> GetLinksToKeys ( global::Microsoft.EFDesigner.Property propertyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.KeyHasProperties>(propertyInstance, global::Microsoft.EFDesigner.KeyHasProperties.PropertyDomainRoleId);
		}
		#endregion
		#region KeyHasProperties instance accessors
		
		/// <summary>
		/// Get any KeyHasProperties links between a given Key and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.KeyHasProperties> GetLinks( global::Microsoft.EFDesigner.Key source, global::Microsoft.EFDesigner.Property target )
		{
			global::System.Collections.Generic.List<global::Microsoft.EFDesigner.KeyHasProperties> outLinks = new global::System.Collections.Generic.List<global::Microsoft.EFDesigner.KeyHasProperties>();
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.KeyHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.KeyHasProperties>(source, global::Microsoft.EFDesigner.KeyHasProperties.KeyDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.KeyHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one KeyHasProperties link between a given Keyand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EFDesigner.KeyHasProperties GetLink( global::Microsoft.EFDesigner.Key source, global::Microsoft.EFDesigner.Property target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.KeyHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.KeyHasProperties>(source, global::Microsoft.EFDesigner.KeyHasProperties.KeyDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.KeyHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.EFDesigner
{
	/// <summary>
	/// DomainRelationship EntityTypeHasPrimaryKey
	/// Description for Microsoft.EFDesigner.EntityTypeHasPrimaryKey
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EFDesigner.EntityTypeHasPrimaryKey.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EFDesigner.EntityTypeHasPrimaryKey.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7df938b1-d5a3-4758-9034-528f73423bae")]
	public partial class EntityTypeHasPrimaryKey : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeHasPrimaryKey domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7df938b1, 0xd5a3, 0x4758, 0x90, 0x34, 0x52, 0x8f, 0x73, 0x42, 0x3b, 0xae);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeHasPrimaryKey link in the same Partition as the given EntityType
		/// </summary>
		/// <param name="source">EntityType to use as the source of the relationship.</param>
		/// <param name="target">Key to use as the target of the relationship.</param>
		public EntityTypeHasPrimaryKey(EntityType source, Key target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeHasPrimaryKey.EntityTypeDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeHasPrimaryKey.KeyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasPrimaryKey(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasPrimaryKey(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasPrimaryKey(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasPrimaryKey(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityType domain role code
		
		/// <summary>
		/// EntityType domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeDomainRoleId = new global::System.Guid(0xd617545f, 0x93db, 0x411b, 0xa5, 0xcf, 0xd0, 0xac, 0xfa, 0x11, 0x37, 0x8d);
		
		/// <summary>
		/// DomainRole EntityType
		/// Description for Microsoft.EFDesigner.EntityTypeHasPrimaryKey.EntityType
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.EntityTypeHasPrimaryKey/EntityType.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.EntityTypeHasPrimaryKey/EntityType.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PrimaryKey", PropertyDisplayNameKey="Microsoft.EFDesigner.EntityTypeHasPrimaryKey/EntityType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d617545f-93db-411b-a5cf-d0acfa11378d")]
		public virtual EntityType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityType)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PrimaryKeyedEntityType of a Key
		/// <summary>
		/// Gets PrimaryKeyedEntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityType GetPrimaryKeyedEntityType(Key element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, KeyDomainRoleId) as EntityType;
		}
		
		/// <summary>
		/// Sets PrimaryKeyedEntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPrimaryKeyedEntityType(Key element, EntityType newEntityType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, KeyDomainRoleId, newEntityType);
		}
		#endregion
		#region Key domain role code
		
		/// <summary>
		/// Key domain role Id.
		/// </summary>
		public static readonly global::System.Guid KeyDomainRoleId = new global::System.Guid(0xc2eb93b2, 0xb9ae, 0x48bd, 0xb6, 0x75, 0x1d, 0x0b, 0x98, 0x1b, 0x4d, 0x71);
		
		/// <summary>
		/// DomainRole Key
		/// Description for Microsoft.EFDesigner.EntityTypeHasPrimaryKey.Key
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.EntityTypeHasPrimaryKey/Key.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.EntityTypeHasPrimaryKey/Key.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PrimaryKeyedEntityType", PropertyDisplayNameKey="Microsoft.EFDesigner.EntityTypeHasPrimaryKey/Key.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c2eb93b2-b9ae-48bd-b675-1d0b981b4d71")]
		public virtual Key Key
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Key)DslModeling::DomainRoleInfo.GetRolePlayer(this, KeyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, KeyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PrimaryKey of a EntityType
		/// <summary>
		/// Gets PrimaryKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Key GetPrimaryKey(EntityType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityTypeDomainRoleId) as Key;
		}
		
		/// <summary>
		/// Sets PrimaryKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPrimaryKey(EntityType element, Key newKey)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityTypeDomainRoleId, newKey);
		}
		#endregion
		#region EntityType link accessor
		/// <summary>
		/// Get the EntityTypeHasPrimaryKey link to a EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey GetLinkToPrimaryKey (global::Microsoft.EFDesigner.EntityType entityTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey>(entityTypeInstance, global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey.EntityTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntityType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Key link accessor
		/// <summary>
		/// Get the EntityTypeHasPrimaryKey link to a Key.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey GetLinkToPrimaryKeyedEntityType (global::Microsoft.EFDesigner.Key keyInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey>(keyInstance, global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey.KeyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Key not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeHasPrimaryKey instance accessors
		
		/// <summary>
		/// Get any EntityTypeHasPrimaryKey links between a given EntityType and a Key.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey> GetLinks( global::Microsoft.EFDesigner.EntityType source, global::Microsoft.EFDesigner.Key target )
		{
			global::System.Collections.Generic.List<global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey> outLinks = new global::System.Collections.Generic.List<global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey>();
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey>(source, global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey.EntityTypeDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey link in links )
			{
				if ( target.Equals(link.Key) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeHasPrimaryKey link between a given EntityTypeand a Key.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey GetLink( global::Microsoft.EFDesigner.EntityType source, global::Microsoft.EFDesigner.Key target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey>(source, global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey.EntityTypeDomainRoleId);
			foreach ( global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey link in links )
			{
				if ( target.Equals(link.Key) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
