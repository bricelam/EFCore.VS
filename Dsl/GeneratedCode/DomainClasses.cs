//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.EFDesigner
{
	/// <summary>
	/// DomainClass Model
	/// Description for Microsoft.EFDesigner.Model
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EFDesigner.Model.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EFDesigner.Model.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4d78f5c6-f391-408f-80a0-f6d98d92f1fc")]
	public partial class Model : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Model domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4d78f5c6, 0xf391, 0x408f, 0x80, 0xa0, 0xf6, 0xd9, 0x8d, 0x92, 0xf1, 0xfc);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Model(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Model(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EntityTypes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EntityTypes.
		/// Description for Microsoft.EFDesigner.ModelHasEntityTypes.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityType> EntityTypes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EntityType>, EntityType>(global::Microsoft.EFDesigner.ModelHasEntityTypes.ModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.EFDesigner.EntityType.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.EFDesigner.EntityType sourceEntityType1 = sourceElement as global::Microsoft.EFDesigner.EntityType;
			if (sourceEntityType1 != null)
			{
				// Create link for path ModelHasEntityTypes.EntityTypes
				this.EntityTypes.Add(sourceEntityType1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.EFDesigner.EntityType sourceEntityType1 = sourceElement as global::Microsoft.EFDesigner.EntityType;
			if (sourceEntityType1 != null)
			{
				// Delete link for path ModelHasEntityTypes.EntityTypes
				
				foreach (DslModeling::ElementLink link in global::Microsoft.EFDesigner.ModelHasEntityTypes.GetLinks((global::Microsoft.EFDesigner.Model)this, sourceEntityType1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.EFDesigner.ModelHasEntityTypes.ModelDomainRoleId, global::Microsoft.EFDesigner.ModelHasEntityTypes.EntityTypeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Microsoft.EFDesigner
{
	/// <summary>
	/// DomainClass EntityType
	/// Description for Microsoft.EFDesigner.EntityType
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EFDesigner.EntityType.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EFDesigner.EntityType.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("12cfabd0-b252-48ba-9575-47e1ed98ffad")]
	public partial class EntityType : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EntityType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x12cfabd0, 0xb252, 0x48ba, 0x95, 0x75, 0x47, 0xe1, 0xed, 0x98, 0xff, 0xad);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3883f3ce, 0xd150, 0x4b5c, 0x86, 0xcf, 0x61, 0x89, 0xb0, 0x8b, 0xee, 0x94);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Microsoft.EFDesigner.EntityType.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.EntityType/Name.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.EntityType/Name.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("3883f3ce-d150-4b5c-86cf-6189b08bee94")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityType.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityType, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityType.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityType.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region HasClrType domain property code
		
		/// <summary>
		/// HasClrType domain property Id.
		/// </summary>
		public static readonly global::System.Guid HasClrTypeDomainPropertyId = new global::System.Guid(0x01cd022f, 0xdacb, 0x415b, 0xa5, 0x37, 0x29, 0x39, 0x1d, 0x30, 0x96, 0xbf);
		
		/// <summary>
		/// Storage for HasClrType
		/// </summary>
		private global::System.Boolean hasClrTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of HasClrType domain property.
		/// Description for Microsoft.EFDesigner.EntityType.Has Clr Type
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.EntityType/HasClrType.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.EntityType/HasClrType.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("01cd022f-dacb-415b-a537-29391d3096bf")]
		public global::System.Boolean HasClrType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return hasClrTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HasClrTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityType.HasClrType domain property.
		/// </summary>
		internal sealed partial class HasClrTypePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityType, global::System.Boolean>
		{
			private HasClrTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityType.HasClrType domain property value handler.
			/// </summary>
			public static readonly HasClrTypePropertyHandler Instance = new HasClrTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityType.HasClrType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HasClrTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.hasClrTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.hasClrTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for Microsoft.EFDesigner.ModelHasEntityTypes.EntityType
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.EFDesigner.ModelHasEntityTypes.EntityTypeDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.EFDesigner.ModelHasEntityTypes.EntityTypeDomainRoleId, value);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for Microsoft.EFDesigner.EntityTypeHasProperties.EntityType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::Microsoft.EFDesigner.EntityTypeHasProperties.EntityTypeDomainRoleId);
			}
		}
		#endregion
		#region ForeignKeys opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ForeignKeys.
		/// Description for Microsoft.EFDesigner.EntityTypeHasForeignKeys.EntityType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ForeignKey> ForeignKeys
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ForeignKey>, ForeignKey>(global::Microsoft.EFDesigner.EntityTypeHasForeignKeys.EntityTypeDomainRoleId);
			}
		}
		#endregion
		#region Keys opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Keys.
		/// Description for Microsoft.EFDesigner.EntityTypeHasKeyes.EntityType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Key> Keys
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Key>, Key>(global::Microsoft.EFDesigner.EntityTypeHasKeyes.EntityTypeDomainRoleId);
			}
		}
		#endregion
		#region PrimaryKey opposite domain role accessor
		/// <summary>
		/// Gets or sets PrimaryKey.
		/// Description for Microsoft.EFDesigner.EntityTypeHasPrimaryKey.EntityType
		/// </summary>
		public virtual Key PrimaryKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey.EntityTypeDomainRoleId) as Key;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey.EntityTypeDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.EFDesigner.Property.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.EFDesigner.ForeignKey.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.EFDesigner.Key.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.EFDesigner.Property sourceProperty1 = sourceElement as global::Microsoft.EFDesigner.Property;
			if (sourceProperty1 != null)
			{
				// Create link for path EntityTypeHasProperties.Properties
				this.Properties.Add(sourceProperty1);

				return;
			}
				
			global::Microsoft.EFDesigner.ForeignKey sourceForeignKey2 = sourceElement as global::Microsoft.EFDesigner.ForeignKey;
			if (sourceForeignKey2 != null)
			{
				// Create link for path EntityTypeHasForeignKeys.ForeignKeys
				this.ForeignKeys.Add(sourceForeignKey2);

				return;
			}
				
			global::Microsoft.EFDesigner.Key sourceKey3 = sourceElement as global::Microsoft.EFDesigner.Key;
			if (sourceKey3 != null)
			{
				// Create link for path EntityTypeHasKeyes.Keys
				this.Keys.Add(sourceKey3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.EFDesigner.Property sourceProperty1 = sourceElement as global::Microsoft.EFDesigner.Property;
			if (sourceProperty1 != null)
			{
				// Delete link for path EntityTypeHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::Microsoft.EFDesigner.EntityTypeHasProperties.GetLinks((global::Microsoft.EFDesigner.EntityType)this, sourceProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.EFDesigner.EntityTypeHasProperties.EntityTypeDomainRoleId, global::Microsoft.EFDesigner.EntityTypeHasProperties.PropertyDomainRoleId);
				}

				return;
			}
				
			global::Microsoft.EFDesigner.ForeignKey sourceForeignKey2 = sourceElement as global::Microsoft.EFDesigner.ForeignKey;
			if (sourceForeignKey2 != null)
			{
				// Delete link for path EntityTypeHasForeignKeys.ForeignKeys
				
				foreach (DslModeling::ElementLink link in global::Microsoft.EFDesigner.EntityTypeHasForeignKeys.GetLinks((global::Microsoft.EFDesigner.EntityType)this, sourceForeignKey2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.EFDesigner.EntityTypeHasForeignKeys.EntityTypeDomainRoleId, global::Microsoft.EFDesigner.EntityTypeHasForeignKeys.ForeignKeyDomainRoleId);
				}

				return;
			}
				
			global::Microsoft.EFDesigner.Key sourceKey3 = sourceElement as global::Microsoft.EFDesigner.Key;
			if (sourceKey3 != null)
			{
				// Delete link for path EntityTypeHasKeyes.Keys
				
				foreach (DslModeling::ElementLink link in global::Microsoft.EFDesigner.EntityTypeHasKeyes.GetLinks((global::Microsoft.EFDesigner.EntityType)this, sourceKey3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.EFDesigner.EntityTypeHasKeyes.EntityTypeDomainRoleId, global::Microsoft.EFDesigner.EntityTypeHasKeyes.KeyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Microsoft.EFDesigner
{
	/// <summary>
	/// DomainClass Property
	/// Description for Microsoft.EFDesigner.Property
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EFDesigner.Property.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EFDesigner.Property.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("43a3ddeb-c298-49d3-99d6-0a22916547fb")]
	public partial class Property : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Property domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x43a3ddeb, 0xc298, 0x49d3, 0x99, 0xd6, 0x0a, 0x22, 0x91, 0x65, 0x47, 0xfb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsNullable domain property code
		
		/// <summary>
		/// IsNullable domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsNullableDomainPropertyId = new global::System.Guid(0x8bceb0dd, 0x68fe, 0x49c3, 0x87, 0x6b, 0x6a, 0x4e, 0xa7, 0x6b, 0xb1, 0xa4);
		
		/// <summary>
		/// Storage for IsNullable
		/// </summary>
		private global::System.Boolean isNullablePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsNullable domain property.
		/// Description for Microsoft.EFDesigner.Property.Is Nullable
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.Property/IsNullable.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.Property/IsNullable.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8bceb0dd-68fe-49c3-876b-6a4ea76bb1a4")]
		public global::System.Boolean IsNullable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isNullablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsNullablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.IsNullable domain property.
		/// </summary>
		internal sealed partial class IsNullablePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.Boolean>
		{
			private IsNullablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.IsNullable domain property value handler.
			/// </summary>
			public static readonly IsNullablePropertyHandler Instance = new IsNullablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.IsNullable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsNullableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isNullablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isNullablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PropertyType domain property code
		
		/// <summary>
		/// PropertyType domain property Id.
		/// </summary>
		public static readonly global::System.Guid PropertyTypeDomainPropertyId = new global::System.Guid(0x1ec130ba, 0x1df3, 0x4ec6, 0xad, 0x42, 0xef, 0x8b, 0x56, 0x9e, 0x08, 0x4e);
		
		/// <summary>
		/// Storage for PropertyType
		/// </summary>
		private global::System.String propertyTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of PropertyType domain property.
		/// Description for Microsoft.EFDesigner.Property.Property Type
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.Property/PropertyType.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.Property/PropertyType.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1ec130ba-1df3-4ec6-ad42-ef8b569e084e")]
		public global::System.String PropertyType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return propertyTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PropertyTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.PropertyType domain property.
		/// </summary>
		internal sealed partial class PropertyTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private PropertyTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.PropertyType domain property value handler.
			/// </summary>
			public static readonly PropertyTypePropertyHandler Instance = new PropertyTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.PropertyType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PropertyTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.propertyTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.propertyTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x0a42276f, 0xee88, 0x4402, 0xbe, 0xa5, 0x20, 0xe8, 0x56, 0xab, 0x9f, 0x9c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Microsoft.EFDesigner.Property.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.EFDesigner.Property/Name.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.EFDesigner.Property/Name.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("0a42276f-ee88-4402-bea5-20e856ab9f9c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EntityType opposite domain role accessor
		/// <summary>
		/// Gets or sets EntityType.
		/// Description for Microsoft.EFDesigner.EntityTypeHasProperties.Property
		/// </summary>
		public virtual EntityType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.EFDesigner.EntityTypeHasProperties.PropertyDomainRoleId) as EntityType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.EFDesigner.EntityTypeHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
		#region ForeignKeys opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ForeignKeys.
		/// Description for Microsoft.EFDesigner.ForeignKeyHasProperties.Property
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ForeignKey> ForeignKeys
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ForeignKey>, ForeignKey>(global::Microsoft.EFDesigner.ForeignKeyHasProperties.PropertyDomainRoleId);
			}
		}
		#endregion
		#region Keys opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Keys.
		/// Description for Microsoft.EFDesigner.KeyHasProperties.Property
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Key> Keys
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Key>, Key>(global::Microsoft.EFDesigner.KeyHasProperties.PropertyDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Microsoft.EFDesigner
{
	/// <summary>
	/// DomainClass ForeignKey
	/// Description for Microsoft.EFDesigner.ForeignKey
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EFDesigner.ForeignKey.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EFDesigner.ForeignKey.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0bab0bc3-cd2c-46e1-81df-4c577a408b40")]
	public partial class ForeignKey : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ForeignKey domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0bab0bc3, 0xcd2c, 0x46e1, 0x81, 0xdf, 0x4c, 0x57, 0x7a, 0x40, 0x8b, 0x40);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ForeignKey(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ForeignKey(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EntityType opposite domain role accessor
		/// <summary>
		/// Gets or sets EntityType.
		/// Description for Microsoft.EFDesigner.EntityTypeHasForeignKeys.ForeignKey
		/// </summary>
		public virtual EntityType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.EFDesigner.EntityTypeHasForeignKeys.ForeignKeyDomainRoleId) as EntityType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.EFDesigner.EntityTypeHasForeignKeys.ForeignKeyDomainRoleId, value);
			}
		}
		#endregion
		#region ReferencedKey opposite domain role accessor
		/// <summary>
		/// Gets or sets ReferencedKey.
		/// Description for Microsoft.EFDesigner.ForeignKeyReferencesKey.ForeignKey
		/// </summary>
		public virtual Key ReferencedKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.EFDesigner.ForeignKeyReferencesKey.ForeignKeyDomainRoleId) as Key;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.EFDesigner.ForeignKeyReferencesKey.ForeignKeyDomainRoleId, value);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for Microsoft.EFDesigner.ForeignKeyHasProperties.ForeignKey
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::Microsoft.EFDesigner.ForeignKeyHasProperties.ForeignKeyDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Microsoft.EFDesigner
{
	/// <summary>
	/// DomainClass Key
	/// Description for Microsoft.EFDesigner.Key
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.EFDesigner.Key.DisplayName", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.EFDesigner.Key.Description", typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel), "Microsoft.EFDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.EFDesigner.EFDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("19a58852-24f3-4eff-a5fc-d605ec90851c")]
	public partial class Key : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Key domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x19a58852, 0x24f3, 0x4eff, 0xa5, 0xfc, 0xd6, 0x05, 0xec, 0x90, 0x85, 0x1c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Key(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Key(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EntityType opposite domain role accessor
		/// <summary>
		/// Gets or sets EntityType.
		/// Description for Microsoft.EFDesigner.EntityTypeHasKeyes.Key
		/// </summary>
		public virtual EntityType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.EFDesigner.EntityTypeHasKeyes.KeyDomainRoleId) as EntityType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.EFDesigner.EntityTypeHasKeyes.KeyDomainRoleId, value);
			}
		}
		#endregion
		#region ForeignKeys opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ForeignKeys.
		/// Description for Microsoft.EFDesigner.ForeignKeyReferencesKey.Key
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ForeignKey> ForeignKeys
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ForeignKey>, ForeignKey>(global::Microsoft.EFDesigner.ForeignKeyReferencesKey.KeyDomainRoleId);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for Microsoft.EFDesigner.KeyHasProperties.Key
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::Microsoft.EFDesigner.KeyHasProperties.KeyDomainRoleId);
			}
		}
		#endregion
		#region PrimaryKeyedEntityType opposite domain role accessor
		/// <summary>
		/// Gets or sets PrimaryKeyedEntityType.
		/// Description for Microsoft.EFDesigner.EntityTypeHasPrimaryKey.Key
		/// </summary>
		public virtual EntityType PrimaryKeyedEntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey.KeyDomainRoleId) as EntityType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.EFDesigner.EntityTypeHasPrimaryKey.KeyDomainRoleId, value);
			}
		}
		#endregion
	}
}
